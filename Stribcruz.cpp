#include "main.h"
#include "sound.h"

//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\

/*

  ===MESSAGE===

If you're reading this message, then you got the src(source code) from the author or you decompiled the malware, right?
So I'm going to tell you something
Don't ever apply this malware!!!
Because this malware is based on hydrogen.
There is no good in applying it!

That's all.

*/

//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\

//Default GDI

DWORD WINAPI sound(LPVOID lpParam)
{
	while (1)
	{
		sound1();
		Sleep(20000);
		sound2();
		Sleep(20000);
		sound3();
		Sleep(20000);
		sound4();
		Sleep(20000);
		sound5();
		Sleep(20000);
		sound6();
		Sleep(20000);
		sound7();
		Sleep(20000);
	}
}

//GDI Designation

//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\

//payload1

DWORD WINAPI gdi1(LPVOID lpParam)
{
	while (1)
	{
		int Time = 10;
		int dwStartTime = Time;
		HDC hdcScreen = GetDC(NULL);
		POINT ptScreen = GetVirtualScreenPos();
		SIZE szScreen = GetVirtualScreenSize();

		BITMAPINFO bmi = { 0 };
		PRGBQUAD prgbScreen;
		HDC hdcTempScreen;
		HBITMAP hbmScreen;
		HDC desk = GetDC(0);
		int sw = GetSystemMetrics(0), sh = GetSystemMetrics(1);
		double moveangle = 0;

		bmi.bmiHeader.biSize = sizeof(BITMAPINFO);
		bmi.bmiHeader.biBitCount = 32;
		bmi.bmiHeader.biPlanes = 1;
		bmi.bmiHeader.biWidth = szScreen.cx;
		bmi.bmiHeader.biHeight = szScreen.cy;

		hdcTempScreen = CreateCompatibleDC(hdcScreen);
		hbmScreen = CreateDIBSection(hdcScreen, &bmi, 0, (void**)&prgbScreen, NULL, 0);
		SelectObject(hdcTempScreen, hbmScreen);

		for (int i = 0; Time < (dwStartTime + Time); i++)
		{
			hdcScreen = GetDC(NULL);
			BitBlt(hdcTempScreen, 0, 0, szScreen.cx, szScreen.cy, hdcScreen, 0, 0, SRCCOPY);
			int t = i;
			for (int i = 0; i < szScreen.cx * szScreen.cy; i++)
			{
				prgbScreen[i].rgb = (prgbScreen[i].rgb % 0x101) * 0x010101;
			}
			int ax = (int)(cos(moveangle) * 25), ay = (int)(sin(moveangle) * 5);
			BitBlt(hdcScreen, 0, 0, szScreen.cx, szScreen.cy, hdcTempScreen, 0, 0, SRCCOPY);
			BitBlt(desk, ax, ay, sw, sh, desk, 0, 0, SRCCOPY);
			moveangle = fmod(moveangle + M_PI / 16.f, M_PI * 2.f);
			ReleaseDC(NULL, hdcScreen);
			DeleteObject(hdcScreen);
			Sleep(5);
		}
		DeleteObject(hbmScreen);
		DeleteDC(hdcTempScreen);
		RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
		Sleep(1000);
	}
}

//payload2

DWORD WINAPI gdi2(LPVOID lpParam)
{
	while (1)
	{
		int Time = 10;
		int dwStartTime = Time;
		HDC hdcScreen = GetDC(NULL);
		POINT ptScreen = GetVirtualScreenPos();
		SIZE szScreen = GetVirtualScreenSize();

		BITMAPINFO bmi = { 0 };
		PRGBQUAD prgbScreen;
		HDC hdcTempScreen;
		HBITMAP hbmScreen;

		bmi.bmiHeader.biSize = sizeof(BITMAPINFO);
		bmi.bmiHeader.biBitCount = 32;
		bmi.bmiHeader.biPlanes = 1;
		bmi.bmiHeader.biWidth = szScreen.cx;
		bmi.bmiHeader.biHeight = szScreen.cy;

		hdcTempScreen = CreateCompatibleDC(hdcScreen);
		hbmScreen = CreateDIBSection(hdcScreen, &bmi, 0, (void**)&prgbScreen, NULL, 0);
		SelectObject(hdcTempScreen, hbmScreen);

		for (int i = 0; Time < (dwStartTime + Time); i++)
		{
			hdcScreen = GetDC(NULL);
			BitBlt(hdcTempScreen, 0, 0, szScreen.cx, szScreen.cy, hdcScreen, 0, 0, SRCCOPY);
			int t = i;
			for (int i = 0; i < szScreen.cy; i++)
			{
				for (int j = 0; j < szScreen.cx; j++)
				{
					prgbScreen[i * szScreen.cx + j].rgb = RGB((prgbScreen[i * szScreen.cx + j].g | i), (prgbScreen[i].r | j), (prgbScreen[i * szScreen.cx + j].b | i / 50));
				}
			}
			BitBlt(hdcScreen, 0, 0, szScreen.cx, szScreen.cy, hdcTempScreen, 0, 0, SRCCOPY);
			ReleaseDC(NULL, hdcScreen);
			DeleteObject(hdcScreen);
			Sleep(25);
		}
		DeleteObject(hbmScreen);
		DeleteDC(hdcTempScreen);
		RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
		Sleep(1000);
	}
}

//payload3

DWORD WINAPI gdi3(LPVOID lpParam)
{
	while (1)
	{
		int Time = 10;
		int dwStartTime = Time;
		HDC hdcScreen = GetDC(NULL);
		POINT ptScreen = GetVirtualScreenPos();
		SIZE szScreen = GetVirtualScreenSize();

		BITMAPINFO bmi = { 0 };
		PRGBQUAD prgbScreen;
		HDC hdcTempScreen;
		HBITMAP hbmScreen;

		bmi.bmiHeader.biSize = sizeof(BITMAPINFO);
		bmi.bmiHeader.biBitCount = 32;
		bmi.bmiHeader.biPlanes = 1;
		bmi.bmiHeader.biWidth = szScreen.cx;
		bmi.bmiHeader.biHeight = szScreen.cy;

		hdcTempScreen = CreateCompatibleDC(hdcScreen);
		hbmScreen = CreateDIBSection(hdcScreen, &bmi, 0, (void**)&prgbScreen, NULL, 0);
		SelectObject(hdcTempScreen, hbmScreen);

		for (int i = 0; Time < (dwStartTime + Time); i++)
		{
			hdcScreen = GetDC(NULL);
			BitBlt(hdcTempScreen, 0, 0, szScreen.cx, szScreen.cy, hdcScreen, 0, 0, SRCCOPY);
			int t = i;
			for (int i = 0; i < szScreen.cy; i++)
			{
				for (int j = 0; j < szScreen.cx; j++)
				{
					prgbScreen[i * szScreen.cx + j].rgb = RGB((prgbScreen[i * szScreen.cx + j].g | i) % 250, (prgbScreen[i].g + j), (prgbScreen[i * szScreen.cx + j].b | i / 250)) + t * 10;
				}
			}
			BitBlt(hdcScreen, 0, 0, szScreen.cx, szScreen.cy, hdcTempScreen, 0, 0, SRCCOPY);
			ReleaseDC(NULL, hdcScreen);
			DeleteObject(hdcScreen);
			Sleep(5);
		}
		DeleteObject(hbmScreen);
		DeleteDC(hdcTempScreen);
		RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
		Sleep(1000);
	}
}

//payload4

DWORD WINAPI gdi4(LPVOID lpParam)
{
	while (1)
	{
		int Time = 10;
		int dwStartTime = Time;
		HDC hdcScreen = GetDC(NULL);
		POINT ptScreen = GetVirtualScreenPos();
		SIZE szScreen = GetVirtualScreenSize();

		BITMAPINFO bmi = { 0 };
		PRGBQUAD prgbScreen;
		HDC hdcTempScreen;
		HBITMAP hbmScreen;

		bmi.bmiHeader.biSize = sizeof(BITMAPINFO);
		bmi.bmiHeader.biBitCount = 32;
		bmi.bmiHeader.biPlanes = 1;
		bmi.bmiHeader.biWidth = szScreen.cx;
		bmi.bmiHeader.biHeight = szScreen.cy;

		hdcTempScreen = CreateCompatibleDC(hdcScreen);
		hbmScreen = CreateDIBSection(hdcScreen, &bmi, 0, (void**)&prgbScreen, NULL, 0);
		SelectObject(hdcTempScreen, hbmScreen);

		for (int i = 0; Time < (dwStartTime + Time); i++)
		{
			hdcScreen = GetDC(NULL);
			BitBlt(hdcTempScreen, 0, 0, szScreen.cx, szScreen.cy, hdcScreen, 0, 0, SRCCOPY);
			int t = i;
			for (int i = 0; i < szScreen.cy; i++)
			{
				for (int j = 0; j < szScreen.cx; j++)
				{
					prgbScreen[i * szScreen.cx + j].rgb = RGB((prgbScreen[i * szScreen.cx + j].g * i), (prgbScreen[i].g | j), (prgbScreen[i * szScreen.cx + j].b | i) % 250) + t * 10;
				}
			}
			BitBlt(hdcScreen, 0, 0, szScreen.cx, szScreen.cy, hdcTempScreen, 0, 0, SRCCOPY);
			ReleaseDC(NULL, hdcScreen);
			DeleteObject(hdcScreen);
			Sleep(25);
		}
		DeleteObject(hbmScreen);
		DeleteDC(hdcTempScreen);
		RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
		Sleep(1000);
	}
}

//payload5

DWORD WINAPI gdi5(LPVOID lpParam)
{
	while (1)
	{
		int Time = 10;
		int dwStartTime = Time;
		HDC hdcScreen = GetDC(NULL);
		POINT ptScreen = GetVirtualScreenPos();
		SIZE szScreen = GetVirtualScreenSize();

		BITMAPINFO bmi = { 0 };
		PRGBQUAD prgbScreen;
		HDC hdcTempScreen;
		HBITMAP hbmScreen;

		bmi.bmiHeader.biSize = sizeof(BITMAPINFO);
		bmi.bmiHeader.biBitCount = 32;
		bmi.bmiHeader.biPlanes = 1;
		bmi.bmiHeader.biWidth = szScreen.cx;
		bmi.bmiHeader.biHeight = szScreen.cy;

		hdcTempScreen = CreateCompatibleDC(hdcScreen);
		hbmScreen = CreateDIBSection(hdcScreen, &bmi, 0, (void**)&prgbScreen, NULL, 0);
		SelectObject(hdcTempScreen, hbmScreen);

		for (int i = 0; Time < (dwStartTime + Time); i++)
		{
			hdcScreen = GetDC(NULL);
			BitBlt(hdcTempScreen, 0, 0, szScreen.cx, szScreen.cy, hdcScreen, 0, 0, SRCCOPY);
			int t = i;
			for (int i = 0; i < szScreen.cy; i++)
			{
				for (int j = 0; j < szScreen.cx; j++)
				{
					prgbScreen[i * szScreen.cx + j].rgb = RGB((prgbScreen[i * szScreen.cx + j].g | j), (prgbScreen[i].r + i), (prgbScreen[i * szScreen.cx + j].b | i) % 250) + t * 10;
				}
			}
			BitBlt(hdcScreen, 0, 0, szScreen.cx, szScreen.cy, hdcTempScreen, 0, 0, SRCCOPY);
			ReleaseDC(NULL, hdcScreen);
			DeleteObject(hdcScreen);
			Sleep(25);
		}
		DeleteObject(hbmScreen);
		DeleteDC(hdcTempScreen);
		RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
		Sleep(1000);
	}
}

//payload6

DWORD WINAPI gdi6(LPVOID lpParam)
{
	while (1)
	{
		int Time = 10;
		int dwStartTime = Time;
		HDC hdcScreen = GetDC(NULL);
		POINT ptScreen = GetVirtualScreenPos();
		SIZE szScreen = GetVirtualScreenSize();

		BITMAPINFO bmi = { 0 };
		PRGBQUAD prgbScreen;
		HDC hdcTempScreen;
		HBITMAP hbmScreen;

		bmi.bmiHeader.biSize = sizeof(BITMAPINFO);
		bmi.bmiHeader.biBitCount = 32;
		bmi.bmiHeader.biPlanes = 1;
		bmi.bmiHeader.biWidth = szScreen.cx;
		bmi.bmiHeader.biHeight = szScreen.cy;

		hdcTempScreen = CreateCompatibleDC(hdcScreen);
		hbmScreen = CreateDIBSection(hdcScreen, &bmi, 0, (void**)&prgbScreen, NULL, 0);
		SelectObject(hdcTempScreen, hbmScreen);

		for (int i = 0; Time < (dwStartTime + Time); i++)
		{
			hdcScreen = GetDC(NULL);
			BitBlt(hdcTempScreen, 0, 0, szScreen.cx, szScreen.cy, hdcScreen, 0, 0, SRCCOPY);
			int t = i;
			for (int i = 0; i < szScreen.cy; i++)
			{
				for (int j = 0; j < szScreen.cx; j++)
				{
					prgbScreen[i * szScreen.cx + j].rgb = RGB((prgbScreen[i * szScreen.cx + j].r | i) % 250, (prgbScreen[i].r * j / 2) % 250, (prgbScreen[25].r + j / 2) % 250);
				}
			}
			BitBlt(hdcScreen, 0, 0, szScreen.cx, szScreen.cy, hdcTempScreen, 0, 0, SRCCOPY);
			ReleaseDC(NULL, hdcScreen);
			DeleteObject(hdcScreen);
			Sleep(25);
		}
		DeleteObject(hbmScreen);
		DeleteDC(hdcTempScreen);
		RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
		Sleep(1000);
	}
}

//payload7

DWORD WINAPI gdi7(LPVOID lpParam)
{
	while (1)
	{
		int Time = 10;
		int dwStartTime = Time;
		HDC hdcScreen = GetDC(NULL);
		POINT ptScreen = GetVirtualScreenPos();
		SIZE szScreen = GetVirtualScreenSize();

		BITMAPINFO bmi = { 0 };
		PRGBQUAD prgbScreen;
		HDC hdcTempScreen;
		HBITMAP hbmScreen;

		bmi.bmiHeader.biSize = sizeof(BITMAPINFO);
		bmi.bmiHeader.biBitCount = 32;
		bmi.bmiHeader.biPlanes = 1;
		bmi.bmiHeader.biWidth = szScreen.cx;
		bmi.bmiHeader.biHeight = szScreen.cy;

		hdcTempScreen = CreateCompatibleDC(hdcScreen);
		hbmScreen = CreateDIBSection(hdcScreen, &bmi, 0, (void**)&prgbScreen, NULL, 0);
		SelectObject(hdcTempScreen, hbmScreen);

		for (int i = 0; Time < (dwStartTime + Time); i++)
		{
			hdcScreen = GetDC(NULL);
			BitBlt(hdcTempScreen, 0, 0, szScreen.cx, szScreen.cy, hdcScreen, 0, 0, SRCCOPY);
			int t = i;
			for (int i = 0; i < szScreen.cy; i++)
			{
				for (int j = 0; j < szScreen.cx; j++)
				{
					prgbScreen[i * szScreen.cx + j].rgb = RGB((prgbScreen[10].r * i), (prgbScreen[i].r | j), (prgbScreen[5].r + j / 1) % 250);
				}
			}
			BitBlt(hdcScreen, 0, 0, szScreen.cx, szScreen.cy, hdcTempScreen, 0, 0, SRCCOPY);
			ReleaseDC(NULL, hdcScreen);
			DeleteObject(hdcScreen);
			Sleep(25);
		}
		DeleteObject(hbmScreen);
		DeleteDC(hdcTempScreen);
		RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
		Sleep(1000);
	}
}

//payload8

DWORD WINAPI gdi8(LPVOID lpParam)
{
	while (1)
	{
		int Time = 10;
		int dwStartTime = Time;
		HDC hdcScreen = GetDC(NULL);
		POINT ptScreen = GetVirtualScreenPos();
		SIZE szScreen = GetVirtualScreenSize();

		BITMAPINFO bmi = { 0 };
		PRGBQUAD prgbScreen;
		HDC hdcTempScreen;
		HBITMAP hbmScreen;

		bmi.bmiHeader.biSize = sizeof(BITMAPINFO);
		bmi.bmiHeader.biBitCount = 32;
		bmi.bmiHeader.biPlanes = 1;
		bmi.bmiHeader.biWidth = szScreen.cx;
		bmi.bmiHeader.biHeight = szScreen.cy;

		hdcTempScreen = CreateCompatibleDC(hdcScreen);
		hbmScreen = CreateDIBSection(hdcScreen, &bmi, 0, (void**)&prgbScreen, NULL, 0);
		SelectObject(hdcTempScreen, hbmScreen);

		for (int i = 0; Time < (dwStartTime + Time); i++)
		{
			hdcScreen = GetDC(NULL);
			BitBlt(hdcTempScreen, 0, 0, szScreen.cx, szScreen.cy, hdcScreen, 0, 0, SRCCOPY);
			int t = i;
			for (int i = 0; i < szScreen.cy; i++)
			{
				for (int j = 0; j < szScreen.cx; j++)
				{
					prgbScreen[i * szScreen.cx + j].rgb = RGB((prgbScreen[i * szScreen.cx + j].b + i), (prgbScreen[5].r + j), (prgbScreen[5].r + j / 10)) + t;
				}
			}
			BitBlt(hdcScreen, 0, 0, szScreen.cx, szScreen.cy, hdcTempScreen, 0, 0, SRCCOPY);
			ReleaseDC(NULL, hdcScreen);
			DeleteObject(hdcScreen);
			Sleep(25);
		}
		DeleteObject(hbmScreen);
		DeleteDC(hdcTempScreen);
		RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
		Sleep(1000);
	}
}

//payload9

DWORD WINAPI gdi9(LPVOID lpParam)
{
	while (1)
	{
		int Time = 10;
		int dwStartTime = Time;
		HDC hdcScreen = GetDC(NULL);
		POINT ptScreen = GetVirtualScreenPos();
		SIZE szScreen = GetVirtualScreenSize();

		BITMAPINFO bmi = { 0 };
		PRGBQUAD prgbScreen;
		HDC hdcTempScreen;
		HBITMAP hbmScreen;

		bmi.bmiHeader.biSize = sizeof(BITMAPINFO);
		bmi.bmiHeader.biBitCount = 32;
		bmi.bmiHeader.biPlanes = 1;
		bmi.bmiHeader.biWidth = szScreen.cx;
		bmi.bmiHeader.biHeight = szScreen.cy;

		hdcTempScreen = CreateCompatibleDC(hdcScreen);
		hbmScreen = CreateDIBSection(hdcScreen, &bmi, 0, (void**)&prgbScreen, NULL, 0);
		SelectObject(hdcTempScreen, hbmScreen);

		for (int i = 0; Time < (dwStartTime + Time); i++)
		{
			hdcScreen = GetDC(NULL);
			BitBlt(hdcTempScreen, 0, 0, szScreen.cx, szScreen.cy, hdcScreen, 0, 0, SRCCOPY);
			int t = i;
			for (int i = 0; i < szScreen.cy; i++)
			{
				for (int j = 0; j < szScreen.cx; j++)
				{
					prgbScreen[i * szScreen.cx + j].rgb = RGB((prgbScreen[i * szScreen.cx + j].b + i / 3) % 256, (prgbScreen[i].r | j / 3) % 256, (prgbScreen[5].rgb + j / 1) % 250);
				}
			}
			BitBlt(hdcScreen, 0, 0, szScreen.cx, szScreen.cy, hdcTempScreen, 0, 0, SRCCOPY);
			ReleaseDC(NULL, hdcScreen);
			DeleteObject(hdcScreen);
			Sleep(25);
		}
		DeleteObject(hbmScreen);
		DeleteDC(hdcTempScreen);
		RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
		Sleep(1000);
	}
}

//payload10

DWORD WINAPI gdi10(LPVOID lpParam)
{
	while (1)
	{
		int Time = 10;
		int dwStartTime = Time;
		HDC hdcScreen = GetDC(NULL);
		POINT ptScreen = GetVirtualScreenPos();
		SIZE szScreen = GetVirtualScreenSize();

		BITMAPINFO bmi = { 0 };
		PRGBQUAD prgbScreen;
		HDC hdcTempScreen;
		HBITMAP hbmScreen;

		bmi.bmiHeader.biSize = sizeof(BITMAPINFO);
		bmi.bmiHeader.biBitCount = 32;
		bmi.bmiHeader.biPlanes = 1;
		bmi.bmiHeader.biWidth = szScreen.cx;
		bmi.bmiHeader.biHeight = szScreen.cy;

		hdcTempScreen = CreateCompatibleDC(hdcScreen);
		hbmScreen = CreateDIBSection(hdcScreen, &bmi, 0, (void**)&prgbScreen, NULL, 0);
		SelectObject(hdcTempScreen, hbmScreen);

		for (int i = 0; Time < (dwStartTime + Time); i++)
		{
			hdcScreen = GetDC(NULL);
			BitBlt(hdcTempScreen, 0, 0, szScreen.cx, szScreen.cy, hdcScreen, 0, 0, SRCCOPY);
			int t = i;
			for (int i = 0; i < szScreen.cy; i++)
			{
				for (int j = 0; j < szScreen.cx; j++)
				{
					prgbScreen[i * szScreen.cx + j].rgb = RGB((prgbScreen[i * szScreen.cx + j].g | i / 5) % 250, (prgbScreen[i * szScreen.cx + j].rgb | j / 5) % 50, (prgbScreen[i * szScreen.cx + j].rgb | t) % 250);
				}
			}
			BitBlt(hdcScreen, 0, 0, szScreen.cx, szScreen.cy, hdcTempScreen, 0, 0, SRCCOPY);
			ReleaseDC(NULL, hdcScreen);
			DeleteObject(hdcScreen);
			Sleep(25);
		}
		DeleteObject(hbmScreen);
		DeleteDC(hdcTempScreen);
		RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
		Sleep(1000);
	}
}

//payload11

DWORD WINAPI gdi11(LPVOID lpParam)
{
	while (1)
	{
		int Time = 10;
		int dwStartTime = Time;
		HDC hdcScreen = GetDC(NULL);
		POINT ptScreen = GetVirtualScreenPos();
		SIZE szScreen = GetVirtualScreenSize();

		BITMAPINFO bmi = { 0 };
		PRGBQUAD prgbScreen;
		HDC hdcTempScreen;
		HBITMAP hbmScreen;

		bmi.bmiHeader.biSize = sizeof(BITMAPINFO);
		bmi.bmiHeader.biBitCount = 32;
		bmi.bmiHeader.biPlanes = 1;
		bmi.bmiHeader.biWidth = szScreen.cx;
		bmi.bmiHeader.biHeight = szScreen.cy;

		hdcTempScreen = CreateCompatibleDC(hdcScreen);
		hbmScreen = CreateDIBSection(hdcScreen, &bmi, 0, (void**)&prgbScreen, NULL, 0);
		SelectObject(hdcTempScreen, hbmScreen);

		for (int i = 0; Time < (dwStartTime + Time); i++)
		{
			hdcScreen = GetDC(NULL);
			BitBlt(hdcTempScreen, 0, 0, szScreen.cx, szScreen.cy, hdcScreen, 0, 0, SRCCOPY);
			int t = i;
			for (int i = 0; i < szScreen.cx * szScreen.cy; i++)
			{
				int r = GetRValue(prgbScreen[i].rgb), g = GetGValue(prgbScreen[i].rgb), b = GetBValue(prgbScreen[i].rgb);
				prgbScreen[i].rgb = (RGB((r + g | g) / 5, (r + g + g) / 5, (r | g + b) / 3) + t * int(sqrt(i))) % (RGB(25, 50, 500));
			}
			BitBlt(hdcScreen, 0, 0, szScreen.cx, szScreen.cy, hdcTempScreen, 0, 0, SRCCOPY);
			ReleaseDC(NULL, hdcScreen);
			DeleteObject(hdcScreen);
			Sleep(25);
		}
		DeleteObject(hbmScreen);
		DeleteDC(hdcTempScreen);
		RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
		Sleep(1000);
	}
}

//payload12

DWORD WINAPI gdi12(LPVOID lpParam)
{
	while (1)
	{
		int Time = 10;
		int dwStartTime = Time;
		HDC hdcScreen = GetDC(NULL);
		POINT ptScreen = GetVirtualScreenPos();
		SIZE szScreen = GetVirtualScreenSize();

		BITMAPINFO bmi = { 0 };
		PRGBQUAD prgbScreen;
		HDC hdcTempScreen;
		HBITMAP hbmScreen;

		bmi.bmiHeader.biSize = sizeof(BITMAPINFO);
		bmi.bmiHeader.biBitCount = 32;
		bmi.bmiHeader.biPlanes = 1;
		bmi.bmiHeader.biWidth = szScreen.cx;
		bmi.bmiHeader.biHeight = szScreen.cy;

		hdcTempScreen = CreateCompatibleDC(hdcScreen);
		hbmScreen = CreateDIBSection(hdcScreen, &bmi, 0, (void**)&prgbScreen, NULL, 0);
		SelectObject(hdcTempScreen, hbmScreen);

		for (int i = 0; Time < (dwStartTime + Time); i++)
		{
			hdcScreen = GetDC(NULL);
			BitBlt(hdcTempScreen, 0, 0, szScreen.cx, szScreen.cy, hdcScreen, 0, 0, SRCCOPY);
			int t = i;
			for (int i = 0; i < szScreen.cy; i++)
			{
				for (int j = 0; j < szScreen.cx; j++)
				{
					prgbScreen[i * szScreen.cx + j].rgb = RGB((prgbScreen[i * szScreen.cx + j].r | i / 50) % 250, (prgbScreen[i * szScreen.cx + j].r | j / 50) % 250, (prgbScreen[i * szScreen.cx + j].rgb + t) % 250);
				}
			}
			BitBlt(hdcScreen, 0, 0, szScreen.cx, szScreen.cy, hdcTempScreen, 0, 0, SRCCOPY);
			ReleaseDC(NULL, hdcScreen);
			DeleteObject(hdcScreen);
			Sleep(25);
		}
		DeleteObject(hbmScreen);
		DeleteDC(hdcTempScreen);
		RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
		Sleep(1000);
	}
}

//payload13

DWORD WINAPI gdi13(LPVOID lpParam)
{
	while (1)
	{
		int Time = 10;
		int dwStartTime = Time;
		HDC hdcScreen = GetDC(NULL);
		POINT ptScreen = GetVirtualScreenPos();
		SIZE szScreen = GetVirtualScreenSize();

		BITMAPINFO bmi = { 0 };
		PRGBQUAD prgbScreen;
		HDC hdcTempScreen;
		HBITMAP hbmScreen;

		bmi.bmiHeader.biSize = sizeof(BITMAPINFO);
		bmi.bmiHeader.biBitCount = 32;
		bmi.bmiHeader.biPlanes = 1;
		bmi.bmiHeader.biWidth = szScreen.cx;
		bmi.bmiHeader.biHeight = szScreen.cy;

		hdcTempScreen = CreateCompatibleDC(hdcScreen);
		hbmScreen = CreateDIBSection(hdcScreen, &bmi, 0, (void**)&prgbScreen, NULL, 0);
		SelectObject(hdcTempScreen, hbmScreen);

		for (int i = 0; Time < (dwStartTime + Time); i++)
		{
			hdcScreen = GetDC(NULL);
			BitBlt(hdcTempScreen, 0, 0, szScreen.cx, szScreen.cy, hdcScreen, 0, 0, SRCCOPY);
			int t = i;
			for (int i = 0; i < szScreen.cy; i++)
			{
				for (int j = 0; j < szScreen.cx; j++)
				{
					prgbScreen[i * szScreen.cx + j].rgb = RGB((prgbScreen[i * szScreen.cx + j].g | j) % 256, (prgbScreen[i].r * i) % 256, (prgbScreen[5].r + j));
				}
			}
			BitBlt(hdcScreen, 0, 0, szScreen.cx, szScreen.cy, hdcTempScreen, 0, 0, SRCCOPY);
			ReleaseDC(NULL, hdcScreen);
			DeleteObject(hdcScreen);
			Sleep(25);
		}
		DeleteObject(hbmScreen);
		DeleteDC(hdcTempScreen);
		RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
		Sleep(1000);
	}
}

//payload14

DWORD WINAPI gdi14(LPVOID lpParam)
{
	while (1)
	{
		int Time = 10;
		int dwStartTime = Time;
		HDC hdcScreen = GetDC(NULL);
		POINT ptScreen = GetVirtualScreenPos();
		SIZE szScreen = GetVirtualScreenSize();

		BITMAPINFO bmi = { 0 };
		PRGBQUAD prgbScreen;
		HDC hdcTempScreen;
		HBITMAP hbmScreen;

		bmi.bmiHeader.biSize = sizeof(BITMAPINFO);
		bmi.bmiHeader.biBitCount = 32;
		bmi.bmiHeader.biPlanes = 1;
		bmi.bmiHeader.biWidth = szScreen.cx;
		bmi.bmiHeader.biHeight = szScreen.cy;

		hdcTempScreen = CreateCompatibleDC(hdcScreen);
		hbmScreen = CreateDIBSection(hdcScreen, &bmi, 0, (void**)&prgbScreen, NULL, 0);
		SelectObject(hdcTempScreen, hbmScreen);

		for (int i = 0; Time < (dwStartTime + Time); i++)
		{
			hdcScreen = GetDC(NULL);
			BitBlt(hdcTempScreen, 0, 0, szScreen.cx, szScreen.cy, hdcScreen, 0, 0, SRCCOPY);
			int t = i;
			for (int i = 0; i < szScreen.cy; i++)
			{
				for (int j = 0; j < szScreen.cx; j++)
				{
					prgbScreen[i * szScreen.cx + j].rgb = RGB((prgbScreen[i * szScreen.cx + j].g * j) % 256, (prgbScreen[i].g | i) % 256, (prgbScreen[i * szScreen.cx + j].r + j));
				}
			}
			BitBlt(hdcScreen, 0, 0, szScreen.cx, szScreen.cy, hdcTempScreen, 0, 0, SRCCOPY);
			ReleaseDC(NULL, hdcScreen);
			DeleteObject(hdcScreen);
			Sleep(25);
		}
		DeleteObject(hbmScreen);
		DeleteDC(hdcTempScreen);
		RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
		Sleep(1000);
	}
}

int WINAPI WinMain(HINSTANCE a, HINSTANCE b, LPSTR c, int d)
{
	//WARNING

	if (MessageBox(NULL, "!!!WARNING!!!\n\nYou have ran a Trojan known as Stribcruz.exe that has full capacity to delete all of your data and your operating system.\n\nBy continuing, you keep in mind that the creator will not be responsible for any damage caused by this trojan and it is highly recommended that you run this in a testing virtual machine where a snapshot has been made before execution for the sake of entertainment and analysis.\n\nAre you sure you want to run this?", "Stribcruz.exe - !!!WARNING!!! ", MB_ICONWARNING | MB_YESNO) != IDYES)
		exit(1);

	if (MessageBox(NULL, "!!!FINAL WARNING!!!\n\nThis Trojan has a lot of destructive potential. You will lose all of your data if you continue, and the creator will not be responsible for any of the damage caused. This is not meant to be malicious but simply for entertainment and educational purposes.\n\nAre you sure you want to continue?\nThis is your final chance to stop this program from execution.", "Stribcruz.exe - !!!FINAL WARNING!!!", MB_ICONWARNING | MB_YESNO) != IDYES)
		exit(1);
	//Default GDI

	CreateThread(0, 0, sound, 0, 0, 0);

	Sleep(1000);
	
	HANDLE payload1 = CreateThread(0, 0, gdi1, 0, 0, 0);
	Sleep(4000);
	TerminateThread(payload1, 0);
	CloseHandle(payload1);
	RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
	HANDLE payload2 = CreateThread(0, 0, gdi2, 0, 0, 0);
	Sleep(7500);
	TerminateThread(payload2, 0);
	CloseHandle(payload2);
	RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
	HANDLE payload3 = CreateThread(0, 0, gdi3, 0, 0, 0);
	Sleep(7500);
	TerminateThread(payload3, 0);
	CloseHandle(payload3);
	RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
	HANDLE payload4 = CreateThread(0, 0, gdi4, 0, 0, 0);
	Sleep(10000);
	TerminateThread(payload4, 0);
	CloseHandle(payload4);
	RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
	HANDLE payload5 = CreateThread(0, 0, gdi5, 0, 0, 0);
	Sleep(10000);
	TerminateThread(payload5, 0);
	CloseHandle(payload5);
	RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
	HANDLE payload6 = CreateThread(0, 0, gdi6, 0, 0, 0);
	Sleep(10000);
	TerminateThread(payload6, 0);
	CloseHandle(payload6);
	RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
	HANDLE payload7 = CreateThread(0, 0, gdi7, 0, 0, 0);
	Sleep(10000);
	TerminateThread(payload7, 0);
	CloseHandle(payload7);
	RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
	HANDLE payload8 = CreateThread(0, 0, gdi8, 0, 0, 0);
	Sleep(10000);
	TerminateThread(payload8, 0);
	CloseHandle(payload8);
	RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
	HANDLE payload9 = CreateThread(0, 0, gdi9, 0, 0, 0);
	Sleep(10000);
	TerminateThread(payload9, 0);
	CloseHandle(payload9);
	RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
	HANDLE payload10 = CreateThread(0, 0, gdi10, 0, 0, 0);
	Sleep(10000);
	TerminateThread(payload10, 0);
	CloseHandle(payload10);
	RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
	HANDLE payload11 = CreateThread(0, 0, gdi11, 0, 0, 0);
	Sleep(10000);
	TerminateThread(payload11, 0);
	CloseHandle(payload11);
	RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
	HANDLE payload12 = CreateThread(0, 0, gdi12, 0, 0, 0);
	Sleep(10000);
	TerminateThread(payload12, 0);
	CloseHandle(payload12);
	RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
	HANDLE payload13 = CreateThread(0, 0, gdi13, 0, 0, 0);
	Sleep(10000);
	TerminateThread(payload13, 0);
	CloseHandle(payload13);
	RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
	HANDLE payload14 = CreateThread(0, 0, gdi14, 0, 0, 0);
	Sleep(10000);
	TerminateThread(payload14, 0);
	CloseHandle(payload14);
	RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
	//Sleep(10000); //GDI TESTING TIMER
	exit(1);
}